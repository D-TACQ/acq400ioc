record (bo, "${UUT}:SYS:LED:TRG") {
	field(ONAM, "ON")
	field(ZNAM, "OFF")
	field(DESC, "LED TRiGger")
	field(DTYP, "boAcqHost")
	field(SCAN, "1 second")
	field(OMSL, "closed_loop")	
	field(DOL, "${UUT}:0:SIG:TRG_EXT:ACTIVE")
	field(OUT, "@/dev/gpio/LED/TRG_G")
	field(FLNK, "${UUT}:SYS:LED:TRG:FAULT")
}

# acq2106d37 error .. TRG goes amber
# make sure it doesn't by always writing 0 to TRG_R
# can still declare a fault by writing to FAULT directly.

record (calc, "${UUT}:SYS:LED:TRG:FAULT") {
    	field(INPA, "0")
    	field(CALC, "A")
    	field(FLNK, "${UUT}:SYS:LED:TRG:FAULT:w")
}
record (bo, "${UUT}:SYS:LED:TRG:FAULT:w") {
	field(ONAM, "ON")
	field(ZNAM, "OFF")
	field(DESC, "Trigger fault")
    	field(DTYP, "boAcqHost")        
    	field(OMSL, "closed_loop")      
    	field(DOL, "${UUT}:SYS:LED:TRG:FAULT")
    	field(OUT, "@/dev/gpio/LED/TRG_R")      
}


record (bo, "${UUT}:SYS:LED:CLK") {
	field(ONAM, "ON")
	field(ZNAM, "OFF")
	field(DESC, "Led Clock")
	field(DTYP, "boAcqHost")
	field(SCAN, "1 second")
	field(OMSL, "closed_loop")	
	field(DOL, "${UUT}:0:SIG:CLK_MB:ACTIVE")
	field(OUT, "@/dev/gpio/LED/CLK_G")
	field(FLNK, "${UUT}:SYS:LED:CLK:f")
}

record (fanout, "${UUT}:SYS:LED:CLK:f")
{
	field(LNK1, "${UUT}:SYS:LED:CLK:FAULT")
	field(LNK2, "${UUT}:SYS:LED:CLK_R")
}
record (bo, "${UUT}:SYS:LED:CLK_R") {
	field(ONAM, "ON")
	field(ZNAM, "OFF")
	field(DESC, "CLK Red")
	field(DTYP, "boAcqHost")
	field(OUT, "@/dev/gpio/LED/CLK_R")
	field(FLNK, "${UUT}:SYS:LED:CLK_A")
}

record (calc, "${UUT}:SYS:LED:CLK_A") {
	field(INPA, "${UUT}:SYS:LED:CLK")
	field(INPB, "${UUT}:SYS:LED:CLK_R")
	field(CALC, "A&&B")
	field(FLNK, "${UUT}:SYS:LED:CLK_GG")
	field(DESC, "CLK G&&R makes Amber")
}

record(calc, "${UUT}:SYS:LED:CLK_GG")
{
	field(INPA, "${UUT}:SYS:LED:CLK")
	field(INPB, "${UUT}:SYS:LED:CLK_R")
	field(CALC, "A && (!B)")
	field(DESC, "CLK G&& !R pure Green")
	field(FLNK, "${UUT}:SYS:LED:CLK_RR")
}

record(calc, "${UUT}:SYS:LED:CLK_RR")
{
	field(INPA, "${UUT}:SYS:LED:CLK")
	field(INPB, "${UUT}:SYS:LED:CLK_R")
	field(CALC, "(!A) && B")
	field(DESC, "CLK G&& !R pure Green")
}

# acq2106d37 error .. TRG goes amber
# make sure it doesn't by always writing 0 to TRG_R
# can still declare a fault by writing to FAULT directly.

record (calc, "${UUT}:SYS:LED:CLK:FAULT") {
    	field(INPA, "0")
    	field(CALC, "A")
    	field(FLNK, "${UUT}:SYS:LED:CLK:FAULT:w")
}
record (bo, "${UUT}:SYS:LED:CLK:FAULT:w") {
	field(ONAM, "ON")
	field(ZNAM, "OFF")
	field(DESC, "")
	field(DTYP, "boAcqHost")        
	field(OMSL, "closed_loop")      
	field(DOL, "${UUT}:SYS:CLK:TRG:FAULT")
	field(OUT, "@/dev/gpio/LED/CLK_R")      
}
record (bo, "${UUT}:SYS:LED:ACT_G") {
	field(DESC, "ACTive Green")
	field(DTYP, "boAcqHost")
	field(OUT, "@/dev/gpio/LED/ACT_G")
	field(ZNAM, "OFF")
	field(ONAM, "ON")
	field(FLNK, "${UUT}:SYS:LED:ACT_A")
}
record (bo, "${UUT}:SYS:LED:ACT_R") {
	field(DESC, "ACTive Red")
	field(DTYP, "boAcqHost")
	field(OUT, "@/dev/gpio/LED/ACT_R")
	field(ZNAM, "OFF")
	field(ONAM, "ON")
	field(FLNK, "${UUT}:SYS:LED:ACT_A")
}
	
record(calc, "${UUT}:SYS:LED:ACT_A")
{
	field(INPA, "${UUT}:SYS:LED:ACT_G")
	field(INPB, "${UUT}:SYS:LED:ACT_R")
	field(CALC, "A&&B")
	field(FLNK, "${UUT}:SYS:LED:ACT_GG")
	field(DESC, "ACT G&&R makes Amber")
}

record(calc, "${UUT}:SYS:LED:ACT_GG")
{
	field(INPA, "${UUT}:SYS:LED:ACT_G")
	field(INPB, "${UUT}:SYS:LED:ACT_R")
	field(CALC, "A && (!B)")
	field(DESC, "ACT G&& !R pure Green")
	field(FLNK, "${UUT}:SYS:LED:ACT_RR")
}

record(calc, "${UUT}:SYS:LED:ACT_RR")
{
	field(INPA, "${UUT}:SYS:LED:ACT_G")
	field(INPB, "${UUT}:SYS:LED:ACT_R")
	field(CALC, "(!A) && B")
	field(DESC, "ACT !G && R pure Red")
}

record (bi, "${UUT}:SYS:LED:ACT_G:r") {
	field(DESC, "")
	field(DTYP, "biAcqHost")
	field(INP, "@/dev/gpio/LED/ACT_G")
	field(ZNAM, "OFF")
	field(ONAM, "ON")
}

record (bi, "${UUT}:SYS:LED:ACT_R:r") {
	field(DESC, "")
	field(DTYP, "biAcqHost")
	field(INP, "@/dev/gpio/LED/ACT_R")
	field(ZNAM, "OFF")
	field(ONAM, "ON")	
}
