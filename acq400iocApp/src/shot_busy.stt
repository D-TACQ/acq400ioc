/* shot_busy.stt .. use LED:ACT to indicate busy (AMBER), then leave it at Green */


program shotBusy
option +r;

int grn; assign grn to "{uut}:SYS:LED:ACT_G";
int red; assign red to "{uut}:SYS:LED:ACT_R";

int tune_amber; assign tune_amber to "${UUT}:SYS:LED:CLK_R";

int bsy; assign bsy to "{uut}:1:SHOT_IN_PROGRESS"; monitor bsy;

int post; assign post to "{uut}:MODE:TRANS_ACT:POST";

int pps_active; assign pps_active to "{uut}:0:WR:PPS:ACTIVE"; 		monitor pps_active;
int tune; 	 	assign tune to 	"{uut}:11:Si5326:TUNEPHASE:BUSY"; 	monitor tune;
int tune_ok; 	assign tune_ok to  "{uut}:11:Si5326:TUNEPHASE:OK"; 	monitor tune_ok;

int verbose;
int pps_dropouts = 0;

ss shotBusy {
	state init {
		when() {
			if (macValueGet("verbose")){
				verbose = macValueGet("verbose")[0] - '0';
			}
			pvGet(tune_ok);
		} state idle
	}
	
	state idle {
		entry {
			if (verbose) printf("idle grn:%d red:%d\n", grn, red);
		}
		when(bsy){
			if (verbose) printf("idle -> shotBusy\n");
			grn = 1; pvPut(grn);   // red+grn = amber
			red = 1; pvPut(red);
		} state busy
	}
	
	state busy {
		when(!bsy){			 						
			red = 0; pvPut(red);  // grn : have data
			pvGet(post);
			grn = post != 0; pvPut(grn);
			if (verbose) printf("shotBusy 99 grn:%d\n", grn);
		} state idle
		
		when(delay(1)){
			if (verbose > 1) printf("shotBusy toggle\n");
			grn = 1; pvPut(grn);   // red+grn = amber
			red = !red; pvPut(red);
		} state busy		
	}
}

ss wrClk {
	state wait_pps {
		when(pps_active){
			tune_amber = 1; pvPut(tune_amber);	// tuning required
			pps_dropouts = 0;
		} state wait_tuning
	}
	
	state wait_tuning {
		when(tune){
			tune_amber = !tune_amber; pvPut(tune_amber);
		} state tuning	
	}
	
	state tuning {
		when(!tune){
			if (verbose) printf("tuneBusy 99\n");
			tune_amber = 1; pvPut(tune_amber);
		} state tuning99
		
		when(delay(1)){
			if (verbose > 1) printf("tuneBusy toggle\n");
			tune_amber = !tune_amber; pvPut(tune_amber);
		} state tuning
	}
	state tuning99 {
		when(tune){
			
		} state tuning
		when(!pps_active){
			
		} state wait_pps
		
		when(tune_ok){
			tune_amber = 0; pvPut(tune_amber);
		} state tune_ok		
	}

	state tune_ok {
		when(!pps_active && ++pps_dropouts > 2){
			
		} state wait_pps
		when(tune){
			tune_amber = 1; pvPut(tune_amber);
		} state tuning
		when (!tune_ok){
			tune_amber = 1; pvPut(tune_amber);
		} state wait_tuning
	}
}

