/* shot_busy.stt .. use LED:ACT to indicate busy (AMBER), then leave it at Green */


program shotBusy
option +r;

int grn; assign grn to "{uut}:SYS:LED:ACT_G";
int red; assign red to "{uut}:SYS:LED:ACT_R";

int bsy; assign bsy to "{uut}:1:SHOT_IN_PROGRESS"; monitor bsy;

int post; assign post to "{uut}:MODE:TRANS_ACT:POST"; monitor post;

int verbose;

ss shotBusy {
	state init {
		when() {
			if (macValueGet("verbose")){
				verbose = macValueGet("verbose")[0] - '0';
			}
		} state idle
	}
	
	state idle {
		entry {
			if (verbose) printf("idle grn:%d red:%d\n", grn, red);
		}
		when(bsy){
			if (verbose) printf("idle -> shotBusy\n");
			grn = 1; pvPut(grn);   // red+grn = amber
			red = 1; pvPut(red);
		} state busy
	}
	
	state busy {
		when(!bsy){			 						
			red = 0; pvPut(red);  // grn : have data
			if (verbose) printf("shotBusy 99 =>check_post\n");
		} state check_post
		
		when(delay(1)){
			if (verbose > 1) printf("shotBusy toggle\n");
			grn = 1; pvPut(grn);   // red+grn = amber
			red = !red; pvPut(red);
		} state busy		
	}
	
	state check_post {
		when(post || delay(1)){
			pvGet(post);
			grn = post != 0; pvPut(grn);
			if (verbose) printf("shotBusy 99 check_post=>idle G:%d\n", grn);
		} state idle
	}
}
