/* judgementWindowClearAll.stt *.
 *
 *
 monitor: acq1001_444:1:JDG:RESET:WIN
 set: 
 	 acq1001_444:1:JDG:11:WIN:L
 	 acq1001_444:1:JDG:11:WIN:R

 */

program judge_win_clr_all
option +r;
option +s;




char* uut;
char* site = "1";		// default site 1, should override 
int nchan = 32;
int wmin = 2;
int wmax = 1024;

int winl[33];	assign winl {};		/* output PV's, index from 1 */
int winr[33];	assign winr {};

int ch;
int verbose;


/* seq judge_win_clr_all "uut=z7io_011,site=1,nchan=32,wmin=2,wmax=4096,priority=0" */

int reset; assign reset to "{uut}:{site}:JDG:RESET:WIN";	monitor reset;
int all_win_r; assign all_win_r to "{uut}:{site}:JDG:ALL:WIN:R"; monitor all_win_r;
int all_win_l; assign all_win_l to "{uut}:{site}:JDG:ALL:WIN:L"; monitor all_win_l;

%{
#include <stdlib.h>
}%

int all_win_r0;
int all_win_l0;

ss judge_win_clr_all {
	state init{
		entry {
			uut = macValueGet("uut"); 
			if (macValueGet("site") != 0){
				site = macValueGet("site");
			}
			if (macValueGet("nchan") != 0){
				nchan = atoi(macValueGet("nchan"));
			}
			if (macValueGet("verbose")){
				verbose = macValueGet("verbose")[0] - '0';
			}
			if (macValueGet("wmin")){
				wmin = atoi(macValueGet("wmin"));
			}
			if (macValueGet("wmax")){
				wmax = atoi(macValueGet("wmax"));
			}			
			for (ch = 1; ch <= nchan; ++ch){
				
				char pvname[80];
				
				snprintf(pvname, sizeof(pvname), "%s:%s:JDG:%02d:WIN:L", uut, site, ch);
				pvAssign(winl[ch], pvname);
				snprintf(pvname, sizeof(pvname), "%s:%s:JDG:%02d:WIN:R", uut, site, ch);
				pvAssign(winr[ch], pvname);
			}
			pvGet(all_win_r); all_win_r0 = all_win_r;
			pvGet(all_win_l); all_win_l0 = all_win_l;
		}
		when() {

		} state wait_action
	}
	state wait_action {
		when(reset){
			reset = 0; pvPut(reset);
			all_win_r0 = all_win_r = wmax; pvPut(all_win_r);
			all_win_l0 = all_win_l = wmin; pvPut(all_win_l);
		} state commit
		
		when(all_win_r != all_win_r0){
			all_win_r0 = all_win_r;
		} state commit_r
		
		when(all_win_l != all_win_l0){
			all_win_l0 = all_win_l;
		} state commit_l		
	}
	
	state commit {
		entry {
			for (ch = 1; ch <= nchan; ++ch){
				winl[ch] = wmin; pvPut(winl[ch]);
				winr[ch] = wmax; pvPut(winr[ch]);
			}			
		}
		when() {
		
		} state wait_action
	}
	
	state commit_r {
		entry { 
			for (ch = 1; ch <= nchan; ++ch){				
				winr[ch] = all_win_r; pvPut(winr[ch]);
			}						
		}
		when() {
			
		} state wait_action
	}
	state commit_l {
		entry { 
			for (ch = 1; ch <= nchan; ++ch){				
				winl[ch] = all_win_l; pvPut(winl[ch]);
			}						
		}
		when() {
			
		} state wait_action
	}	
}
