/* sc32_gain_mux.st */

program sc32_gain_mux
option +r;
option +s;


/* outputs:
 * acq2106_269:1:SC32:mux:shl0
 * INPA: const, mux value 
 * INPB: G21ww
 * INPC: G21xx
 * INPD: G21yy
 * INPE: G21zz
 * 
 * inputs
acq2106_269:1:SC32:G1:26
acq2106_269:1:SC32:G2:26

sc_set_gain	0x01	G2113	G2109	G2105	G2101
sc_set_gain	0x02	G2114	G2110	G2106	G2102
sc_set_gain	0x04	G2115	G2111	G2107	G2103
sc_set_gain	0x08	G2116	G2112	G2108	G2104
sc_set_gain	0x10	G2129	G2125	G2121	G2117
sc_set_gain	0x20	G2130	G2126	G2122	G2118
sc_set_gain	0x40	G2131	G2127	G2123	G2119
sc_set_gain	0x80	G2132	G2128	G2124	G2120
 */

int G1[33]; 	assign G1 to {};	// index from 1
int G2[33]; 	assign G2 to {};	// index from 1

int commit;		assign commit to "{uut}:{site}:SC32:GAIN:COMMIT";
monitor commit;

int commit0;

char* uut;
char* site = "1";		// default site 1, should override 

char pvname[80];
char pvfield[100];

int CMAP[8][4] = {
		{ 13,  9,  5,  1 },
		{ 14, 10,  6,  2 },
		{ 15, 11,  7,  3 },
		{ 16, 12,  8,  4 },
		
		{ 29, 25, 21, 17 },
		{ 30, 26, 22, 18 },
		{ 31, 27, 23, 19 },
		{ 32, 28, 24, 20 }		
};

// mux[:][0] : full PV, mux[;][1:4] INPB..INPE
//int mux[8][5];  assign mux to {};  // %%G8%% workaround

int muxvals[8][4];

int muxes[8]; assign muxes to {};

int G12[33]; 	assign G12 to {};	// index from 1

int ch;
int nchan = 32;
int strobe;
int pair;
int verbose;

int gains[2][4] = {
		{ 1, 10, 100, 1000 },		// G1 physical gains
		{ 1,  2,   5,   10 }        // G2 physical gains
};

ss sc32_gain_mux {
	state init {
		when() {
			uut = macValueGet("uut"); 
			if (macValueGet("site") != 0){
				site = macValueGet("site");
			}	
			if (macValueGet("verbose")){
				verbose = macValueGet("verbose")[0] - '0';
			}
			printf("sc_gain_mux R1012 site:%s\n", site);
			
			for (ch = 1; ch <= nchan; ++ch){
				snprintf(pvname, sizeof(pvname), "%s:%s:SC32:G1:%02d", uut, site, ch);
				pvAssign(G1[ch], pvname);
				if (ch==1) printf("assign %s\n",pvname);
				
				snprintf(pvname, sizeof(pvname), "%s:%s:SC32:G2:%02d", uut, site, ch);
				pvAssign(G2[ch], pvname);
				if (ch==1) printf("assign %s\n",pvname);
				
				snprintf(pvname, sizeof(pvname), "%s:%s:SC32:G12:%02d", uut, site, ch);
				pvAssign(G12[ch], pvname);
				if (ch==1) printf("assign %s\n",pvname);
				
			}
			for (strobe = 0; strobe < 8; ++strobe){
				snprintf(pvname, sizeof(pvname), "%s:%s:SC32:mux:shl%d", uut, site, strobe);
		
				if (verbose > 1) printf("strobe:%d pvn:%s\n", strobe, pvname);
				
				pvAssign(muxes[strobe], pvname);

			}
		} state startup_delay
		// pvassign the arrays.		
	}
	
	state startup_delay {
		when(delay(2)){
			
		} state commit
	}
	
	state commit {
		when() {
			printf("sc_gain_mux commit:%s\n", site);
			for (ch = 1; ch <= nchan; ++ch){
				pvGet(G1[ch]);
				pvGet(G2[ch]);
				if (verbose>1) printf("ch %d G1 %d G2 %d\n", ch, G1[ch], G2[ch]);
				
				for (strobe = 0; strobe < 8; ++strobe){
					for (pair = 0; pair < 4; ++pair){
						
						if (verbose>2) printf("CMAP[%d][%d] == %d\n", strobe, pair, ch);
						
						if (CMAP[strobe][pair] == ch){
							muxvals[strobe][pair] = G2[ch]<<2 | G1[ch];
							
							if (verbose > 1 || (verbose && (strobe==0)))
								printf("CMAP[%d][%d] == %d  YES value G2:%d G1:%d %04x\n", 
									strobe, pair, ch, G2[ch], G1[ch], muxvals[strobe][pair]);
														
							pair = 4; strobe = 8;					// SNL workaround goto next_channel
						}
					}
				}
			}
			for (strobe = 0; strobe < 8; ++strobe){
				muxes[strobe] = muxvals[strobe][0]<<12 | muxvals[strobe][1]<<8 | 
						        muxvals[strobe][2]<<4  | muxvals[strobe][3]<<0;
				printf("strobe:%d muxes %04x\n", strobe, muxes[strobe]);
				pvPut(muxes[strobe], SYNC);
			}
			for (ch = 1; ch <= nchan; ++ch){
				G12[ch] = gains[0][G1[ch]] * gains[1][G2[ch]];
				pvPut(G12[ch]);
			}
			commit = 0; pvPut(commit);
			printf("sc_gain_mux commit:%s => wait_change\n", site);
		} state wait_change
	}
	
	state wait_change {
		entry {
			printf("wait_change entry\n");
		}
		when(commit) {
			printf("wait_change .. =>\n");
		} state commit
	}
}