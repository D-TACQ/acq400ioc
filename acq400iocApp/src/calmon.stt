
// seq calmon "uut=acq1001_064,site=1"
// seq calmon "uut=acq1001_064,site=2"
// dbpr acq1001_064:1:ADC_MODE
// dbpr acq1001_064:1:AI:CH:01 2
// acq1001_064:1:AI:CH:01
// acq1001_064:1:AI:TW:01:V
// acq1001_064:1:AI:WF:01:V

program calmon
option +r;

// nb : always site 1. That's a consequence of Master/Slave

int agg_s1; 		assign agg_s1 to "{uut}:0:AGGREGATOR:S1";
int hi_res_mode;  	assign hi_res_mode;	// dynamic assign and monitor

int hi_res_mode0;

int adc_cal_mode; assign adc_cal_mode to "{uut}:{site}:ADC_CAL";
monitor adc_cal_mode;
int adc_cal_mode0;


float ext_eslo[33]; 	assign ext_eslo to "{uut}:{site}:AI:CAL:ESLO";
float ext_eoff[33]; 	assign ext_eoff to "{uut}:{site}:AI:CAL:EOFF";

float eslo[33];		assign eslo to {};	// index from 1
float eoff[33]; 	assign eoff to {};

int has_ch_gains;	assign has_ch_gains to "{uut}:{site}:HAS_CH_GAINS";

int gain_changes;	assign gain_changes to "";
int gain_changes0;

int gains[33];		assign gains to {};	/* "${UUT}:${SITE}:GAIN:${CH}" */

int data32;		assign data32 to "{uut}:{site}:data32";

char* doc;
char fname[80];
char* uut;
char* site = "1";		// default site 1, should override 
int ch;
int nchan;
char pvname[80];
char pvfield[100];

int scale;

int adc_cal_stash;

%%extern void* acq400_openDoc(const char* docfile, int* nchan);
%%extern int acq400_getChannel(void *prv, int ch, const char* sw, float* eslo, float* eoff, int nocal);
%%extern int acq400_isData32(void* prv);
%%extern int acq400_isCalibrated(void* prv);
%{
static char* getKey(int hrm, int gain) 
{ 
	static char key[16];
	
	if (hrm >= 0){
		snprintf(key, 16, "%d,%d", hrm, gain);
	}else{
		snprintf(key, 16, "%d", gain);
	}
	
	return key; 
}
}%

ss calmon {
	state init {
		when() {
			uut = macValueGet("uut");
			if (macValueGet("site") != 0){
				site = macValueGet("site");
			}
			printf("calmon R1000 %s site:%s\n", uut, site);

			pvGet(agg_s1);
			/* assign hi_res_mode to "{uut}:1:ADC_MODE"; */
			snprintf(pvfield, 100, "%s:%d:ADC_MODE", uut, agg_s1);
			pvAssign(hi_res_mode, pvfield);
			pvMonitor(hi_res_mode);
			pvGet(hi_res_mode);  hi_res_mode0 = hi_res_mode;
			pvGet(has_ch_gains);

			sprintf(fname, "/dev/sites/%s/caldef.xml",  site);			
			doc = acq400_openDoc(fname, &nchan);
			adc_cal_mode = adc_cal_mode0 = acq400_isCalibrated(doc);
			pvPut(adc_cal_mode);
		} state init2
	}
	state init2 {
		when(doc == 0) {
			printf("ERROR failed to read caldef.xml\n");
		} state error
		
		when(doc != 0){
			for (ch = 1; ch <= nchan; ++ch){				
				snprintf(pvname, 80, "%s:%s:AI:CH:%02d", uut, site, ch);						
				snprintf(pvfield, 100, "%s.%s", pvname, "ESLO");
				pvAssign(eslo[ch], pvfield);
				if (ch==1) printf("assign %s\n",pvfield);
				
				snprintf(pvfield, 100, "%s.%s", pvname, "EOFF");
				pvAssign(eoff[ch], pvfield);
				if (ch==1) printf("assign %s\n",pvfield);
				
				if (has_ch_gains){
					snprintf(pvname, 80, "%s:%s:GAIN:%02d", uut, site, ch);
					pvAssign(gains[ch], pvname);
				}
			}
			if (has_ch_gains){
				snprintf(pvname, 80, "%s:%s:GAIN_CHANGES", uut, site);
				pvAssign(gain_changes, pvname);			
				pvMonitor(gain_changes);
			}
		} state make_change		
	}
	
	state error {	
		when(delay(1000)) {
		
		} state error
	}
	
	state make_change {
		when() {
			pvGet(adc_cal_mode);
			if (adc_cal_mode != 0){
				printf("make_change site=%s %s\n", site, adc_cal_mode==1? "caldef": "calibrated");
								
				scale = 0;
				if (acq400_isData32(doc)){
					pvGet(data32);
					if (data32 ==0){
						scale = 256;
					}
				}

				for (ch = 1; ch <= nchan; ++ch){
					if (has_ch_gains){
						pvGet(gains[ch]);
					}		
					if (acq400_getChannel(doc, ch, getKey(hi_res_mode, gains[ch]), 
								&eslo[ch], &eoff[ch], adc_cal_mode==1) == 1){
						if (ch==1){
							printf("site:%s ch:%2d eslo:%.6e eoff:%.6e\n", 
										site, ch, eslo[ch], eoff[ch]);
						}
						if (scale){
							eslo[ch] *= scale;
						}
						pvPut(eslo[ch]);
                                                pvPut(eoff[ch]);
                                                
                                                ext_eslo[ch] = eslo[ch];
                                                ext_eoff[ch] = eoff[ch];
						if (has_ch_gains && ch == 1){
							ext_eslo[0] = ext_eoff[0] = 1+gains[1];
						}						                                                
					}else{
						printf("ERROR return from acq400_getChannel()\n");
					}
				}
				pvPut(ext_eslo);
				pvPut(ext_eoff);
			}else{
				printf("make_change: STUB\n");
			}
		} state wait_change
	}
	
	state wait_change {
		when(hi_res_mode != hi_res_mode0 || adc_cal_mode != adc_cal_mode0 || gain_changes != gain_changes0){
			if (hi_res_mode != hi_res_mode0){		
				printf("change detected hi_res_mode=>%d\n", hi_res_mode);
				hi_res_mode0 = hi_res_mode;				
			}
			if (adc_cal_mode != adc_cal_mode0){
				printf("cal mode changed=>%d\n", adc_cal_mode);
				adc_cal_mode0 = adc_cal_mode;
			}
			if (gain_changes != gain_changes0){
				printf("gain change %d\n", gain_changes);
				gain_changes0 = gain_changes;
			}		 			
		} state make_change
	}
}



ss calmon_on_delay {
	state init {
		entry {
			printf("calmon_on_delay %s entry\n", site);
		}		
		when(delay(3) && (adc_cal_mode)){
			adc_cal_stash = adc_cal_mode;
			adc_cal_mode = 0;
			pvPut(adc_cal_mode);
			printf("calmon_on_delay %s init toggle OFF\n", site);
		} state go_again
		
		when(delay(3) && (adc_cal_mode == 0)){
			
		} state calmon_on_delay_done	
	}
	
	state go_again {
		when(delay(1)){
			adc_cal_mode = adc_cal_stash;
			pvPut(adc_cal_mode);
			printf("calmon_on_delay %s go_again\n", site);
		} state calmon_on_delay_done
	}
	state calmon_on_delay_done {
		entry {
			printf("calmon_on_delay %s calmon_on_delay_done\n", site);
		}
		when(0) {
			
		} state calmon_on_delay_done
	}
}
