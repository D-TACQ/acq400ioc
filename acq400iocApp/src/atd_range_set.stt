/*************************************************************************\
atd_range_set_from_scale.st : rescale ATD threshold scaling depending on SCALE
\*************************************************************************/
program atd_range_set
option +r;

int range;	assign range to "{uut}:{uut}:ANATRG:SCALE";

double DRVL[64];	assign DRVL to {};
double DRVH[64];	assign DRVH to {};
double ESLO[64];	assign ESLO to {};
double HOPR[64];	assign HOPR to {};
double LOPR[64];	assign LOPR to {};


int scale; assign scale to "{uut}:{site}:ANATRG:SCALE"; monitor scale;

string model;	assign model to "{uut}:{site}:MODEL";


monitor range;

/* force initial update */
int scale0 = -1;

%{
	static void getGain(int range, double* drvl, double* drvh, double* eslo)
	{
		*drvl = -10.0 / (1<<range);
		*drvh =  10.0 / (1<<range);
		*eslo = (*drvh - *drvl) / 256;
	}
}%

char* pvfmt = "{uut}:{site}:ANATRG:%02d:L%d:.%s";

int ch;
int lx;


ss atd_range_set
{
	state init
	{
		when() {			
			for (ch = 0; ch < 32; ++ch){
				for (lx = 0; lx <= 1; ++lx){
					char pvname[80];
					snprintf(pvname, sizeof(pvname), pvfmt, ch+1, lx+1, "DRVL");
					pvAssign(DRVL[lx*32+ch], pvname);
					snprintf(pvname, sizeof(pvname), pvfmt, ch+1, lx+1, "DRVH");
					pvAssign(DRVH[lx*32+ch], pvname);					
					snprintf(pvname, sizeof(pvname), pvfmt, ch+1, lx+1, "ESLO");
					pvAssign(ESLO[lx*32+ch], pvname);
					snprintf(pvname, sizeof(pvname), pvfmt, ch+1, lx+1, "HOPR");
					pvAssign(HOPR[lx*32+ch], pvname);
					snprintf(pvname, sizeof(pvname), pvfmt, ch+1, lx+1, "LOPR");
					pvAssign(LOPR[lx*32+ch], pvname);		
				}
			}
		} state update
	}
	state update 
	{
		when(scale != scale0){
			double drvl, drvh, hopr, lopr, eslo;
			getGain(scale, &drvl, &drvh, &eslo);
			hopr = drvh;
			lopr = drvl;
			
						
			for (ch = 0; ch < 32; ++ch){
				for (lx = 0; lx < 2; ++lx){					
					DRVL[lx*32+ch] = drvl; pvPut(DRVL[lx*32+ch]);
					DRVH[lx*32+ch] = drvh; pvPut(DRVH[lx*32+ch]);
					ESLO[lx*32+ch] = eslo; pvPut(ESLO[lx*32+ch]);
					HOPR[lx*32+ch] = hopr; pvPut(HOPR[lx*32+ch]);
					LOPR[lx*32+ch] = lopr; pvPut(LOPR[lx*32+ch]);
				}
			}
			scale0 = scale;
		} state update
	}
}