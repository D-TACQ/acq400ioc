#!/bin/sh

ETOP=/usr/local/epics
STCMD=/tmp/st.cmd
PIDF=/var/run/acq400ioc.pid
LOG=/var/log/epics.log
NICE=5
LG="logger -t acq400ioc.init"
RL=/tmp/records.dbl

if [ -f /etc/profile.d/epics.sh ]; then
	source /etc/profile.d/epics.sh
fi
if [ -f /mnt/local/epics.sh ]; then
	source /mnt/local/epics.sh
fi
if [ -f /mnt/local/sysconfig/epics.sh ]; then
	source /mnt/local/sysconfig/epics.sh
fi

# create access to EPICS PV via site service. This is important for :
# a/ non-EPICS users to get access to EPICS information
# b/ portable, UUT-relative namespace - site service omits ${UUT}:${SITE}

make_caget() {
	[ -L /etc/acq400/$3 ] && return
	PFX=${1%*:$2}
	VERB=/usr/local/bin/caget_$PFX
	if [ ! -e $VERB ]; then
cat - >$VERB <<EOF
#!/bin/sh
PV=${PFX}:\$(basename \${0})
VALUE=\$(caget -s \${PV})
if [ \$? -eq 0 ]; then
	echo \${VALUE#${PFX}:}
else
	echo \${VALUE}
fi
EOF
		chmod 0555 $VERB
	fi
	ln -s $VERB /etc/acq400/$3/$2
}

make_caget_w() {
	[ -L /etc/acq400/$3 ] && return
	PFX=${1%*:$2}
	VERB=/usr/local/bin/caget_w_$PFX
	if [ ! -e $VERB ]; then
cat - >$VERB <<EOF
#!/bin/sh
PV=${PFX}:\$(basename \${0})
VALUE=\$(caget \${PV})
if [ \$? -eq 0 ]; then
	echo \${VALUE#${PFX}:}
else
	echo \${VALUE}
fi
EOF
		chmod a+rx $VERB		
	fi
	ln -s $VERB /etc/acq400/$3/$2	
}

make_caput() {
	[ -L /etc/acq400/$3 ] && return
	PFX=${1%*:$2}
	VERB=/usr/local/bin/caput_$PFX
	if [ ! -e $VERB ]; then
cat - >$VERB <<EOF
#!/bin/sh
PV=${PFX}:\$(basename \${0})
if [ "\$1" = "" ]; then
	VALUE=\$(caget -s \${PV})
	if [ \$? -eq 0 ]; then
			echo \${VALUE#${PFX}:}
	else
			echo \${VALUE}
	fi
else
	VALUE=\$(caput \${PV} \$1)
	if [ \$? -ne 0 ]; then
		echo ERROR
	fi
fi 
EOF
		chmod a+rx $VERB		
	fi
	ln -s $VERB /etc/acq400/$3/$2
}

wait_ioc_ready() {
	let pollcat=0;
	while [ ! -e $RL ]; do
		let report=$pollcat%5
		if [ $report -eq 0 ]; then
			$LG wait_ioc_ready $pollcat
		fi
		sleep 1
		let pollcat="$pollcat+1"
	done	
}

make_site0_knobs() {(
	cd /etc/acq400/0/ 
	rm -f fpmux
	ln -s /usr/local/epics/scripts/ifconfig_eth0
)}

make_epics_knobs() {
	if [ -e /tmp/epics_knobs_done ]; then
		return
	fi

	mkdir -p /etc/acq400/S
	for PV in $(egrep SYS:[0-9][Vv]\|SYS:VA?\|SYS:vcc?\|Z:TEMP\|MGTD $RL)
	do
		NU=${PV#*:}
		make_caget $PV ${NU#*:} S
	done
	
	for PV in $(egrep SIG $RL | grep -v .[a-z]$ | grep -v rawc64)
	do
		NU=${PV#*:}
		SITE=${NU:0:1}
		case $PV in
			*SET|*READY|*BSY|*SRC*|*FIN|*OUT*|*USER*|*TRAIN_REQ|*SIG:DDS:FREQ|*SIG:FP*)
				make_caput $PV ${NU#*:} ${SITE};;
			*)
				make_caget $PV ${NU#*:} ${SITE};;
		esac
	done
	for PV in $(egrep GAIN\|RANGE $RL | grep -v .[a-z]$ )
	do
		NU=${PV#*:}
		SITE=${NU:0:1}
		make_caput $PV ${NU#*:} ${SITE}	
	done
	for PV in $(egrep CAL:E $RL | grep -v .[a-z]$)
	do
		NU=${PV#*:}
		SITE=${NU:0:1}
		make_caget_w $PV ${NU#*:} ${SITE}	
	done	
	for PV in $(grep ACQ4.X_SAMPLE_RATE $RL)
	do
		NU=${PV#*:}
		SITE=${NU:0:1}
		make_caput $PV ${NU#*:} ${SITE}
	done
	
	for PV in $(grep DECIM $RL)
	do
		NU=${PV#*:}
		make_caget $PV ${NU#*:} ${NU:0:1}
	done
	for PV in $(egrep -e FIR:01$ -e HPF:0[1-8] -e T50R \
			-e LFNS -e INVERT $RL | grep -v [a-z]$)
	do
		NU=${PV#*:}
		SITE=${NU:0:1}
		make_caput $PV ${NU#*:} ${NU:0:1}		
	done
	for PV in $(grep $(hostname):SYS:CLK $RL | grep -v [a-z]$ | grep -v clk0$ )
	do
		make_caput $PV ${PV#*:} 0
	done
	
	for PV in $(egrep -e ':[1-6]:CLK' -e :[1-6]:TRG -e :[1-6]:EVE \
			  -e :1:RGM -e :1:RTM -e :[1-6]:XDT -e :1:DT $RL \
			| grep -v ':[0-9a-z_]*$' )
	do
		pv1=${PV#*:}
		make_caput $PV ${pv1#*:} 1
	done
	
	for PV in $(grep GPG /tmp/records.dbl | grep -v :[a-z]$)
	do
		pv1=${PV#*:}
		case $PV in
		*DBG*)
			make_caget $PV ${pv1#*:} 0;;
		*)
			make_caput $PV ${pv1#*:} 0;;
		esac
	done

	for PV in $(egrep -e MODE:TRANSIENT $RL | grep -v [a-z]$)
	do
		pv1=${PV#*:}
		make_caput $PV ${pv1#*:} 0
	done

	for PV in $(egrep -e FPGA:TEMP $RL | grep -v [a-z]$)
	do
		pv1=${PV#*:}
		make_caput $PV ${pv1#*:} 13
	done

	for PV in $(egrep -e MODE:T -e IOC_READY $RL | grep -v [wsrft]$)
	do
		pv1=${PV#*:}
		kn1=${pv1#*:}
		if [ ! -e /etc/acq400/0/$kn1 ]; then
			# avoid repeating MODE:TRANSIENT from above
			echo $pv1 | grep -q SET_
			if [ $? -eq 0 ]; then
				make_caput $PV $kn1 0
			else
				make_caget $PV $kn1 0
			fi
		fi
	done	
	make_site0_knobs	

	killall voltsmon
	daemon /usr/local/bin/voltsmon.epics
	echo make_epics_knobs_done >/tmp/epics_knobs_done
	if [ -e /usr/local/init/acq400_knobs.init ]; then
		/usr/local/init/acq400_knobs.init start
	fi
}
make_stcmd() {
	if [ ! -e ${STCMD} ]; then
		echo "++ create EPICS db ${STCMD}" 
		(cd ${ETOP}; ./scripts/load.records > ${STCMD})		
	fi
	touch /dev/shm/AI
}

make_aliases_loop() {
	while read PV
	do
		echo alias\(\"$PV\",\"$1:${PV#*:}\"\)
	done
}
make_aliases() {
	make_aliases_loop $1 <$RL >/usr/local/epics/db/local-aliases.db	 
}

bump() 
{
	echo X | tr X \\030 | acq4xx-epics-console >/dev/null
}

start_ioc() {
	/usr/local/bin/procServ \
		-c ${ETOP} -p $PIDF -L $LOG \
		2222 \
	/bin/nice -n $NICE /usr/local/bin/acq400ioc ${STCMD}
	$LG start_ioc PID $(cat $PIDF)
}

stop_ioc() {
	if [ -r ${PIDF} ]; then
		$LG stop_ioc PID $(cat $PIDF)
		kill -s TERM $(cat ${PIDF})
		rm ${PIDF}
	fi
}

restart() {
	if [ "$1" = "force" ]; then
		rm -f ${STCMD}
	fi	
	make_stcmd
	stop_ioc
	start_ioc
	wait_ioc_ready
	stop_ioc
	make_epics_knobs
	[ "x$IOC_GLOBAL_ALIAS_PFX" != "x" ] && make_aliases $IOC_GLOBAL_ALIAS_PFX
	cat /tmp/st_final.cmd >> /tmp/st.cmd
	start_ioc
}


case "$1" in
bump)
	bump;;
forcestart)
	restart force;;
start|"")
	restart;;
stop)
	stop_ioc;;

*)
	echo usage acq400ioc.init start\|stop\|forcestart;;
esac
